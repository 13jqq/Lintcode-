public class Solution {
    /*
     * @param s: A string
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
	        // write your code here
		  List<List<String>> result = new ArrayList<List<String>>();
		  if( s == null ){
			  return  null;
		  }
		  if( s.length() == 0 ){
			  result.add(new ArrayList<String>());
			  return result;
		  }
		  Queue<String> queue = new LinkedList<String>();
		  List<String> list = new ArrayList<String>();
		  helper2(s , 0 , list , result);
		  return result;
		  
	    }
	  
	  
	  public void helper2(String s , int start , List<String> list, List<List<String>> result){
		  if( start == s.length() ){
			  result.add(new ArrayList<String>(list));
			  return ;
		  }
		  
		  for( int i = start ; i < s.length() ; i ++){
			  String sub = s.substring(start, i + 1);
			  if( !is_hui(sub)){
				  continue;
			  }
			  list.add(sub);
			  helper2(s,i + 1  , list, result);
			  list.remove(list.size() - 1);
		  }
	  }
	  public boolean is_hui(String s){
		  if( s == null || s.length() == 0 || s.length() == 1){
			  return true;
		  }
		  int len = s.length();
		  for(int i = 0 , j = len- 1 ; i <=j ; i ++ , j--){
			  if( s.charAt(i) != s.charAt(j)){
				  return false;
			  }
		  }
		  return true;
	  }
	 
}
