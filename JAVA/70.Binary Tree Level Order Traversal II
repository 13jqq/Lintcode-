/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param root: A tree
     * @return: buttom-up level order a list of lists of integer
     */
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
	        // write your code here
		  List<List<Integer>> result = new ArrayList<List<Integer>>();
		  if( root == null ){
			  return result	;
		  }
		  Queue<TreeNode> queue = new LinkedList<TreeNode>();
		  queue.offer(root);
		  while( !queue.isEmpty()){
			  List<Integer> list = new ArrayList<Integer>();
			  int size =queue.size();
			  for( int i = 0 ; i < size ; i++){
				  TreeNode t = queue.poll();
				  list.add(t.val);
				  if( t.left != null){
					  queue.offer(t.left);
				  }
				  if( t.right != null){
					  queue.offer(t.right);
				  }
			  }
			  result.add(list);
		  }
		  Collections.reverse(result);
		  return result;
	    }
}
