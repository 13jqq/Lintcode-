public class Solution {
    /**
     * @param num: Given the candidate numbers
     * @param target: Given the target number
     * @return: All the combinations that sum to target
     */
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        // write your code here
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		//Set<List<Integer>> set = new HashSet<List<Integer>>();
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if( num == null){
			return res ;
		}
		Arrays.sort(num);
		List<Integer> list = new ArrayList<Integer>();
		if( num.length == 0){
			//res.add(list);
			return res;
		}
		
		findSub(num , 0 ,target , list , res);
		
		return res;
    }
	/*public static List<List<Integer>> subSet2(int[] nums  ){
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		//Set<List<Integer>> set = new HashSet<List<Integer>>();
		if( nums == null){
			return res ;
		}
		Arrays.sort(nums);
		List<Integer> list = new ArrayList<Integer>();
		if( nums.length == 0){
			res.add(list);
			return res;
		}
		for( int i = 0 ; i <= nums.length ; i++){
			list.clear();
			findSub( nums , 0 , i ,list ,res);
		}
		
		return res;
	}*/
	public static void findSub( int[] nums , int start , int target	 , List<Integer> list , List<List<Integer>> res){
	    if( res.contains(list)){
			return;
		}
		if( target == 0){
			res.add(new ArrayList<Integer>(list));
			return;
		}
		
		
		if( nums == null || nums.length == 0){
			return ;
		}
		int sum = 0;
		for( int i = 0 ; i< list.size() ; i++){
			sum += list.get(i);
		}
		if( sum == target){
			res.add(new ArrayList<Integer>(list));
			return;
		}
		
		
		for( int i = start ; i < nums.length ; i++){
			list.add(nums[i]);
			findSub( nums , i + 1 , target , list , res);
			list.remove(list.size() - 1);
		}
	}
}
