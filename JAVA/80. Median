public class Solution {
    /**
     * @param nums: A list of integers
     * @return: An integer denotes the middle number of the array
     */
    public static void qSort( int[] A , int left , int right){
			  if( left > right){
				  return ;
			  }
			  int i = left ; 
			  int j = right;
			  int tmp = A[left];
			  int t;
			  while( i < j){
				  while( A[j] >= tmp && i < j){
					  j -- ;
				  }
				  while( A[i ] <= tmp && i < j){
					  i ++;
				  }
				  if(  i< j ){
					  t = A [i];
					  A[i ] = A[ j];
					  A[j ] = t;
				  }
			  }
			  A[left] = A [i];
			  A[i]  = tmp;
			  qSort(A , left , j - 1);
			  qSort(A , j + 1 , right);
		  }
		  
		  public int median(int[] nums) {
		        // write your code here
			  if( nums == null || nums.length == 0){
				  return -1;
			  }
			  qSort( nums , 0 , nums.length - 1);
			  if( nums.length % 2 == 0){
				  return nums[nums.length / 2 - 1];
			  }else{
				  return nums[ (nums.length - 1) / 2 ];
			  }
			  
		    }
	}

	
