/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
   public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
		        // write your code here
		  ArrayList<DirectedGraphNode> result = new ArrayList<DirectedGraphNode>();
		  HashMap<DirectedGraphNode , Integer> map = new HashMap<DirectedGraphNode , Integer>();
		  if( graph == null ){
			  return result;
		  }
		  if( graph.size() == 0){
			  return result;
		  }
		  for( DirectedGraphNode node : graph){
			  for(DirectedGraphNode neighbor : node.neighbors ){
				  if( map.containsKey(neighbor)){
					  map.put(neighbor, map.get(neighbor) + 1);
				  }else{
					  map.put(neighbor, 1);
				  }
			  }
		  }
		  Queue<DirectedGraphNode > queue  = new LinkedList<DirectedGraphNode>();
		  for( DirectedGraphNode node : graph){
			  if( !map.containsKey(node)){
				  result.add(node);
				  queue.offer(node);
			  }
		  }
		  
		  while( !queue.isEmpty()){
			  DirectedGraphNode node = queue.poll();
			  for(DirectedGraphNode n : node.neighbors){
				  map.put(n, map.get(n) - 1);
				  if( map.get(n) == 0){
					  result.add(n);
					  queue.offer(n);
				  }
			  }
		  }
		  return result;
	  }  
	  

}
