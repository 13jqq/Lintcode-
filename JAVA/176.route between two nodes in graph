/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) {
 *         label = x;
 *         neighbors = new ArrayList<DirectedGraphNode>();
 *     }
 * };
 */


public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @param s: the starting Directed graph node
     * @param t: the terminal Directed graph node
     * @return: a boolean value
     */
    public boolean hasRoute(ArrayList<DirectedGraphNode> graph, DirectedGraphNode s, DirectedGraphNode t) {
	        // write your code here
		  if( !graph.contains(s) || !graph.contains(t)){
			  return false;
		  }
		  if( s == t){
			  return true;
		  }
		  boolean flag = false;
		  Queue<DirectedGraphNode> queue = new LinkedList<DirectedGraphNode>();
		  HashSet<DirectedGraphNode > visited = new HashSet<DirectedGraphNode>();
		  queue.offer(s);
		  visited.add(s);
		  while(!queue.isEmpty()){
			  DirectedGraphNode node = queue.poll();
			  for( DirectedGraphNode n : node.neighbors){
				  if( n.equals(t)){
					  return true;
				  }
				  if( visited.contains(n)){
					  continue;
				  }else{
					  visited.add(n);
					  queue.offer(n);
				  }
				  
			  }
		  }
		  
		  
		  return flag;
		  
	    }
	  
}	
