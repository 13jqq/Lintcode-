/**
     * @param maze: the maze
     * @param start: the start
     * @param destination: the destination
     * @return: whether the ball could stop at the destination
     */
    
    public class point{
    	int x ; 
    	int y;
    	public point(int newX ,int newY){
    		this.x = newX;
    		this.y = newY;
    	}
    }
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        // write your code here
    	int m = maze.length;  
        int n = maze[0].length; 
        boolean[][] visited = new boolean[m][n];
        
    	Queue<point > queue= new LinkedList<point>();
    	queue.offer(new point(start[0] ,start[1]));
    	int[][] dirs = new int[][]{{0,1} , {0 , -1} , { 1, 0 } ,{-1 , 0}};
    	while ( !queue.isEmpty()){
    		point p = queue.poll();
    		
    		for( int[] d : dirs){
    			int xx = p.x;
    			int yy = p.y;
    			while( xx >= 0 && yy >= 0 && xx <m && yy < n && maze[xx][yy] == 0 ){
    				xx += d[0];
    				yy += d[1];
    			}
    			
    			xx -= d[0];
    			yy -= d[1];
    			if( visited[xx][yy] ){
    				continue;
    			}
    			visited[xx][yy] = true;
    			
    			if( xx == destination[0] && yy == destination[1]){
    				return true;
    			}
    			queue.offer(new point(xx , yy));
    		}
    		
    	}
    	return false;
    	
    	
    	
    }
